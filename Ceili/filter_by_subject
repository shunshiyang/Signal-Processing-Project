clc; close all; clear all;

% Load ECG Data
dataFolder = 'Data/';
subjectIDs = 10:10; % Example: Subject 1
allFeatures = [];

for subj = subjectIDs
    edfFilename = sprintf('%sR%d.edf', dataFolder, subj);
    xmlFilename = sprintf('%sR%d.xml', dataFolder, subj);
    [hdr, record] = edfread(edfFilename);
    [events, stages, epochLength, annotation] = readXML(xmlFilename);

    % Locate ECG Channels
    ecg_indices = find(contains(hdr.label, 'ECG', 'IgnoreCase', true)); % Get indices of ECG channels
    if isempty(ecg_indices)
        fprintf('ECG not found for %s\n', edfFilename);
        continue;
    end

    % Sampling frequency
    Fs = hdr.samples(ecg_indices(1)); % ECG sampling frequency
    numEpochs = floor(length(record(ecg_indices(1), :)) / (30 * Fs)); % Total number of epochs

    % Set number of epochs to process
    numEpochsToPlot = 1;

    % Initialize Preprocessed Signals
    combinedRawECG = [];
    combinedStandardFilteredECG = [];
    combinedAdaptiveFilteredECG = [];

    %% Preprocessing Loop
    for epoch = 1:numEpochsToPlot
        % Extract Epoch
        startIdx = (epoch - 1) * Fs * 30 + 1;
        endIdx = min(startIdx + 30 * Fs - 1, size(record, 2)); 
        signalECG = record(ecg_indices(1), startIdx:endIdx);

        %% Adaptive Filtering Selection Based on SNR
        snrValue = snr(signalECG);
        if snrValue < -5  % High noise subject
            lowPassCutoff = 30; % Stricter filtering
            artifactThreshold = 5; % Higher threshold to suppress more artifacts
        else
            lowPassCutoff = 40; % Less aggressive filtering
            artifactThreshold = 8; % More lenient artifact handling
        end

        %% Method 1: Standard Filtering
        % High-Pass Filter
        [b, a] = butter(4, 0.5/(Fs/2), 'high');
        filteredECG = filtfilt(b, a, signalECG);

        % Notch Filter (50 Hz for powerline interference)
        notchFilter = designfilt('bandstopiir', 'FilterOrder', 2, ...
                                 'HalfPowerFrequency1', 49, ...
                                 'HalfPowerFrequency2', 51, ...
                                 'SampleRate', Fs);
        filteredECG = filtfilt(notchFilter, filteredECG);

        % Adaptive Low-Pass Filter
        % Estimate dominant frequency in the signal using power spectral density
        [pxx, f] = pwelch(signalECG, [], [], [], Fs);
        dominantFreq = f(find(pxx == max(pxx), 1)); % Detect peak power frequency
        
        % Set Low-Pass Cutoff dynamically
        if dominantFreq > 35  % High-frequency content present
            lowPassCutoff = 60; % Retain higher frequencies
        elseif dominantFreq < 20  % Extremely noisy signal
            lowPassCutoff = 30; % Stricter filtering
        else
            lowPassCutoff = 40; % Default setting
        end

        % Apply Dynamic Low-Pass Filter
        [b, a] = butter(4, lowPassCutoff/(Fs/2), 'low'); 
        filteredECG = filtfilt(b, a, signalECG);
        %% Method 2: Adaptive Filtering
        % High-Pass Filtering
        adaptiveECG = filtfilt(b, a, signalECG);

        % Apply Wavelet Denoising for Adaptiveness
        adaptiveECG = wdenoise(adaptiveECG, 4);

        %% Concatenate Signals for Continuous Output
        combinedRawECG = [combinedRawECG; signalECG(:)];
        combinedStandardFilteredECG = [combinedStandardFilteredECG; filteredECG(:)];
        combinedAdaptiveFilteredECG = [combinedAdaptiveFilteredECG; adaptiveECG(:)];
    end

    %% Adaptive Artifact Handling
    windowSize = round(Fs * 3); 
    artifactLocations = isoutlier(combinedRawECG, 'movmedian', windowSize);
    adaptiveArtifactCorrection = abs(combinedRawECG - median(combinedRawECG)) > (artifactThreshold + 3) * std(combinedRawECG);

    % Replace artifact-heavy regions dynamically
    filteredStandardECG = combinedStandardFilteredECG;
    filteredStandardECG(artifactLocations | adaptiveArtifactCorrection) = NaN;
    filteredStandardECG = fillmissing(filteredStandardECG, 'spline');

    filteredAdaptiveECG = combinedAdaptiveFilteredECG;
    filteredAdaptiveECG(artifactLocations | adaptiveArtifactCorrection) = NaN;
    filteredAdaptiveECG = fillmissing(filteredAdaptiveECG, 'spline');

    %% Time Vector for Continuous Signal
    t = (0:length(combinedRawECG)-1) / Fs;

    %% Comparison of Filtering Methods
    snrStandardECG = snr(filteredStandardECG);
    snrAdaptiveECG = snr(filteredAdaptiveECG);
    fprintf('ECG - SNR (Standard Filtering): %.2f dB\n', snrStandardECG);
    fprintf('ECG - SNR (Adaptive Filtering): %.2f dB\n', snrAdaptiveECG);

    %% Plot Comparison
    figure;
    subplot(3,1,1);
    plot(t, combinedRawECG);
    title('Raw ECG Signal');
    xlabel('Time (s)');
    ylabel('Amplitude');

    subplot(3,1,2);
    plot(t, filteredStandardECG);
    title('Standard Filtered ECG Signal');
    xlabel('Time (s)');
    ylabel('Amplitude');

    subplot(3,1,3);
    plot(t, filteredAdaptiveECG);
    title('Adaptive Filtered ECG Signal');
    xlabel('Time (s)');
    ylabel('Amplitude');

    %% Frequency-Domain Analysis
    [pxxStandard, f] = pwelch(filteredStandardECG, [], [], [], Fs);
    [pxxAdaptive, ~] = pwelch(filteredAdaptiveECG, [], [], [], Fs);

    figure;
    plot(f, 10*log10(pxxStandard), 'b');
    hold on;
    plot(f, 10*log10(pxxAdaptive), 'r');
    title('ECG Power Spectral Density (Standard vs Adaptive)');
    xlabel('Frequency (Hz)');
    ylabel('Power (dB)');
    legend('Standard Filtering', 'Adaptive Filtering');
end
