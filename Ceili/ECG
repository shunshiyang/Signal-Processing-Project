clc; close all; clear all;

% Load ECG Data
dataFolder = 'Data/';
subjectIDs = 1:1; % Example: Subject 1
allFeatures = [];

for subj = subjectIDs
    edfFilename = sprintf('%sR%d.edf', dataFolder, subj);
    xmlFilename = sprintf('%sR%d.xml', dataFolder, subj);
    [hdr, record] = edfread(edfFilename);
    [events, stages, epochLength, annotation] = readXML(xmlFilename);

    % Locate ECG Channels
    ecg_indices = find(contains(hdr.label, 'ECG', 'IgnoreCase', true)); % Get indices of ECG channels
    if isempty(ecg_indices)
        fprintf('ECG not found for %s\n', edfFilename);
        continue;
    end

    % Sampling frequency
    Fs = hdr.samples(ecg_indices(1)); % ECG sampling frequency
    numEpochs = floor(length(record(ecg_indices(1), :)) / (30 * Fs)); % Total number of epochs

    % Set number of epochs to process (e.g., 10 epochs = 5 minutes)
    numEpochsToPlot = 10; % First 10 epochs (adjustable)
    % numEpochsToPlot = numEpochs; % Whole signal

    % Initialize Preprocessed Signals
    combinedRawECG = []; % Include raw ECG signal for continuous comparison
    combinedStandardFilteredECG = [];
    combinedAdaptiveFilteredECG = [];

    %% Preprocessing Loop
    for epoch = 1:numEpochsToPlot
        % Extract Epoch
        startIdx = (epoch - 1) * Fs * 30 + 1;
        endIdx = min(startIdx + 30 * Fs - 1, size(record, 2)); % Ensure no out-of-bounds index
        signalECG = record(ecg_indices(1), startIdx:endIdx);

        %% Method 1: Standard Filtering
        % High-Pass Filter
        [b, a] = butter(4, 0.5/(Fs/2), 'high'); % 0.5 Hz cutoff
        filteredECG = filtfilt(b, a, signalECG);

        % Notch Filter (50 Hz for powerline interference)
        notchFilter = designfilt('bandstopiir', 'FilterOrder', 2, ...
                                 'HalfPowerFrequency1', 49, ...
                                 'HalfPowerFrequency2', 51, ...
                                 'SampleRate', Fs);
        filteredECG = filtfilt(notchFilter, filteredECG);

        % Low-Pass Filter
        [b, a] = butter(4, 50/(Fs/2), 'low'); % 50 Hz cutoff
        filteredECG = filtfilt(b, a, filteredECG);

        %% Method 2: Adaptive Filtering
        % High-Pass Filter
        [b, a] = butter(4, 0.5/(Fs/2), 'high'); % 0.5 Hz cutoff
        adaptiveECG = filtfilt(b, a, signalECG);

        % Adaptive Moving Average (dynamic smoothing)
        windowSize = round(Fs * 0.2); % 200ms window
        adaptiveECG = movmean(adaptiveECG, windowSize);

        %% Concatenate Signals for Continuous Output
        combinedRawECG = [combinedRawECG; signalECG(:)]; % Concatenate raw signal
        combinedStandardFilteredECG = [combinedStandardFilteredECG; filteredECG(:)]; % Concatenate standard-filtered signal
        combinedAdaptiveFilteredECG = [combinedAdaptiveFilteredECG; adaptiveECG(:)]; % Concatenate adaptive-filtered signal
    end

    %% Time Vector for Continuous Signal
    t = (0:length(combinedRawECG)-1) / Fs; % Time vector for continuous signal

    %%debugging
    % disp(size(signalECG)); % Dimensions of the current epoch's signal
    % disp(size(combinedRawECG)); % Check accumulation of concatenated signals
    % disp(length(t)); % Should match length(combinedRawECG)
    % disp(length(combinedRawECG)); % Check size of the concatenated raw signal
    % disp(length(combinedStandardFilteredECG)); % Ensure no mismatch


    %% Plot Comparison
    figure;
    subplot(3,1,1);
    plot(t, combinedRawECG); % Continuous Raw Signal
    title('Raw ECG Signal');
    xlabel('Time (s)');
    ylabel('Amplitude');

    subplot(3,1,2);
    plot(t, combinedStandardFilteredECG); % Continuous Standard-Filtered Signal
    title('Standard Filtered ECG Signal');
    xlabel('Time (s)');
    ylabel('Amplitude');

    subplot(3,1,3);
    plot(t, combinedAdaptiveFilteredECG); % Continuous Adaptive-Filtered Signal
    title('Adaptive Filtered ECG Signal');
    xlabel('Time (s)');
    ylabel('Amplitude');

    %% Frequency-Domain Analysis (Power Spectral Density)
    [pxxStandard, f] = pwelch(combinedStandardFilteredECG, [], [], [], Fs);
    [pxxAdaptive, ~] = pwelch(combinedAdaptiveFilteredECG, [], [], [], Fs);

    figure;
    plot(f, 10*log10(pxxStandard), 'b');
    hold on;
    plot(f, 10*log10(pxxAdaptive), 'r');
    title('ECG Power Spectral Density (Standard vs Adaptive)');
    xlabel('Frequency (Hz)');
    ylabel('Power (dB)');
    legend('Standard Filtering', 'Adaptive Filtering');
end
