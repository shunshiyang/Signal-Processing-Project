clc; close all; clear all;


% Load ECG Data
dataFolder = 'Data/';
subjectIDs = 1:10; % Example: Subject 1
allFeatures = [];

for subj = subjectIDs
    edfFilename = sprintf('%sR%d.edf', dataFolder, subj);
    xmlFilename = sprintf('%sR%d.xml', dataFolder, subj);
    [hdr, record] = edfread(edfFilename);
    [events, stages, epochLength, annotation] = readXML(xmlFilename);

    % Locate ECG Channels
    ecg_indices = find(contains(hdr.label, 'ECG', 'IgnoreCase', true)); % Get indices of ECG channels
    if isempty(ecg_indices)
        fprintf('ECG not found for %s\n', edfFilename);
        continue;
    end

    % Sampling frequency
    Fs = hdr.samples(ecg_indices(1)); % ECG sampling frequency
    disp(['Sampling Frequency: ', num2str(Fs)]);
    numEpochs = floor(length(record(ecg_indices(1), :)) / (30 * Fs)); % Total number of epochs

 
    % Set number of epochs to process (e.g., 10 epochs = 5 minutes)
    numEpochsToPlot = 1; % First 10 epochs (adjustable)
    % numEpochsToPlot = numEpochs; % Whole signal

    % Initialize Preprocessed Signals
    combinedRawECG = [];
    combined_avg_filter = [];
    combined_Butterworth_filter = [];

    %% Preprocessing Loop
    for epoch = 1:numEpochsToPlot
        % Extract Epoch
        startIdx = (epoch - 1) * Fs * 30 + 1;
        endIdx = min(startIdx + 30 * Fs - 1, size(record, 2)); 
        signalECG = record(ecg_indices(1), startIdx:endIdx);


      %% STEP 1:
      %% Low-Pass Filter for Aliasing Prevention & Upper-Frequency Cutoff

        %% Method 1: Moving Average Filter  
        % % Define cutoff frequency (150 Hz based on study recommendations)
        lowPassCutoff = 150;
        windowSize = round(Fs / lowPassCutoff); % Define window size
        filteredECG = movmean(signalECG, windowSize);


        % %% Method 2: Chebyshev Type II LPF
        % filterOrder = 4;
        % disp(['Sampling Frequency: ', num2str(Fs)]);
        % %cutt off frequency forced to be less than half the sampling freq
        % lpcutoff = Fs/2 -1;
        % disp(['Low pass cutoff ', num2str(lpcutoff)]);
        % % Design Chebyshev Type II filter (with ripple suppression)
        % [b, a] = cheby2(filterOrder, 40, lpcutoff  / (Fs/2), 'low');
        % % Apply filtering
        % filteredECG2 = filtfilt(b, a, signalECG);

        %% Method 2: ButterqorthLPF
        filterOrder = 4; % Lower order prevents excessive delay
        lpcutoff = Fs/2 -1; % Cutoff frequency forced to be less than half the sampling freq
        
        % Design Butterworth filter
        [b, a] = butter(filterOrder, lpcutoff / (Fs/2), 'low');
        
        % Apply filtering
        filteredECG2 = filtfilt(b, a, signalECG);

      %% STEP 2:
      %% High-Pass filter for Baseline Wander Suppression

        %% High-Pass Filter for Baseline Wander Removal
        % Define cutoff frequency based on AHA guidelines according to paper (see notes)
        highPassCutoff = 0.67;
        
        % Design Butterworth high-pass filter
        filterOrder2 = 4; % Keep order low to prevent unnecessary signal delay
        [b, a] = butter(filterOrder2, highPassCutoff / (Fs/2), 'high'); % Normalized frequency
        
        % Apply zero-phase filtering to avoid phase distortion
        filteredECG_HP_avg = filtfilt(b, a, filteredECG); % Apply HPF to Moving Average filtered ECG
        filteredECG_HP_butter = filtfilt(b, a, filteredECG2); % Apply HPF to Butterworth filtered ECG
       
      %% STEP 3:
      %% 50 Hz Power Line-Frequency Noise Suppression

        notchFilter = designfilt('bandstopiir', 'FilterOrder', 2, ...
                                 'HalfPowerFrequency1', 49, ...
                                 'HalfPowerFrequency2', 51, ...
                                 'SampleRate', Fs); 
        
        % Apply notch filtering to the already high-pass filtered signals
        filteredECG_Notch_avg = filtfilt(notchFilter, filteredECG_HP_avg); 
        filteredECG_Notch_butter = filtfilt(notchFilter, filteredECG_HP_butter);

      %% STEP 4:
      %% Removing Muscle Artifacts & High-Frequency Noise

        % Define polynomial order and window size for smoothing
        polyOrder = 3;
        windowSize = 11; % Ensure window size is odd
        
        % Apply Savitzky-Golay filter
        filteredECG_Artifact_SG_avg = sgolayfilt(filteredECG_Notch_avg, polyOrder, windowSize);
        filteredECG_Artifact_SG_butter = sgolayfilt(filteredECG_Notch_butter, polyOrder, windowSize);
        
        %% Savitzky-Golay does a better job suppressing noise. Selected.
        % % Set wavelet parameters
        % waveletType = 'db4'; % Daubechies 4 wavelet (good for ECG)
        % decompLevel = 4; % 4-level decomposition
        % 
        % % Apply wavelet denoising
        % filteredECG_Artifact_Wavelet_avg = wdenoise(filteredECG_Notch_avg, decompLevel, 'Wavelet', waveletType);
        % filteredECG_Artifact_Wavelet_butter = wdenoise(filteredECG_Notch_butter, decompLevel, 'Wavelet', waveletType);

        %% Concatenate Signals for Continuous Output
        combinedRawECG = [combinedRawECG; signalECG(:)];
        combined_avg_filter = [combined_avg_filter; filteredECG_Artifact_SG_avg(:)];
        combined_Butterworth_filter = [combined_Butterworth_filter; filteredECG_Artifact_SG_butter(:)];
    end


    %% Time Vector for Continuous Signal
    t = (0:length(combinedRawECG)-1) / Fs;

    %% Comparison of Filtering Methods
    snrECG = snr(combinedRawECG);
    snrAvgECG = snr(combined_avg_filter);
    snrButterworthECG = snr(combined_Butterworth_filter);
    fprintf('ECG - SNR (Standard Filtering): %.2f dB\n', snrECG);
    fprintf('ECG - SNR (Standard Filtering): %.2f dB\n', snrAvgECG);
    fprintf('ECG - SNR (Adaptive Filtering): %.2f dB\n', snrButterworthECG);

    %% Plot Comparison
    figure;
    subplot(3,1,1);
    plot(t, combinedRawECG);
    title('Raw ECG Signal');
    xlabel('Time (s)');
    ylabel('Amplitude');

    subplot(3,1,2);
    plot(t, combined_avg_filter);
    title('Moving Average Filtered ECG Signal');
    xlabel('Time (s)');
    ylabel('Amplitude');

    subplot(3,1,3);
    plot(t, combined_Butterworth_filter);
    title('Butterworth Filtered ECG Signal');
    xlabel('Time (s)');
    ylabel('Amplitude');

    %% Frequency-Domain Analysis
    [pxxAvg, f] = pwelch(combined_avg_filter, [], [], [], Fs);
    [pxxButterworth, ~] = pwelch(combined_Butterworth_filter, [], [], [], Fs);

    
    figure;
    plot(f, 10*log10(pxxAvg), 'b');
    hold on;
    plot(f, 10*log10(pxxButterworth), 'r');
    title('ECG Power Spectral Density');
    xlabel('Frequency (Hz)');
    ylabel('Power (dB)');
    legend('Moving Average Filtering', 'ButterworthFiltering');
end
